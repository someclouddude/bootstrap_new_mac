#!/usr/bin/env bash
# macOS bootstrap for mise and core tools
# Installs: Homebrew (if missing), mise, and tools via mise:
#   - python@3.12 (latest patch)
#   - opentofu@1.10 (latest patch)
#   - kubectl@latest
#   - helm@latest
#   - awscli@latest

set -euo pipefail
IFS=$'\n\t'

trap 'echo "[mise-setup][ERROR] Failed at line $LINENO." >&2' ERR

log()  { printf "[mise-setup] %s\n" "$*"; }
warn() { printf "[mise-setup][WARN] %s\n" "$*" >&2; }
die()  { printf "[mise-setup][ERROR] %s\n" "$*" >&2; exit 1; }

have() { command -v "$1" >/dev/null 2>&1; }

require_macos() {
  local os
  os="$(uname -s 2>/dev/null || true)"
  [[ "$os" == "Darwin" ]] || die "This script is for macOS (Darwin). Detected: $os"
}

ensure_brew() {
  if have brew; then
    log "Homebrew found: $(brew --version | head -n1)"
  else
    log "Installing Homebrew…"
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  # Ensure brew is on PATH for Apple Silicon and Intel
  if [[ -x /opt/homebrew/bin/brew ]]; then
    eval "$('/opt/homebrew/bin/brew' shellenv)"
    local zprofile="$HOME/.zprofile"
    mkdir -p "$(dirname "$zprofile")"
    grep -Fqs "eval \"$('/opt/homebrew/bin/brew' shellenv)\"" "$zprofile" || \
      printf '\n# Homebrew (Apple Silicon)\n%s\n' "eval \"$('/opt/homebrew/bin/brew' shellenv)\"" >> "$zprofile"
  elif [[ -x /usr/local/bin/brew ]]; then
    eval "$('/usr/local/bin/brew' shellenv)"
    local zprofile="$HOME/.zprofile"
    mkdir -p "$(dirname "$zprofile")"
    grep -Fqs "eval \"$('/usr/local/bin/brew' shellenv)\"" "$zprofile" || \
      printf '\n# Homebrew (Intel)\n%s\n' "eval \"$('/usr/local/bin/brew' shellenv)\"" >> "$zprofile"
  fi
}

ensure_mise() {
  if have mise; then
    log "mise found: $(mise --version | head -n1)"
    brew upgrade mise || true
  else
    log "Installing mise via Homebrew…"
    brew install mise
  fi

  # Activate mise in zsh for future shells
  local zshrc="$HOME/.zshrc"
  mkdir -p "$(dirname "$zshrc")"
  if ! grep -Fqs 'eval "$(mise activate zsh)"' "$zshrc"; then
    printf '\n# mise activation\neval "$(mise activate zsh)"\n' >> "$zshrc"
    log "Appended mise activation to $zshrc"
  fi

  # Activate mise in current shell
  # shellcheck disable=SC1090
  eval "$(mise activate zsh)"
}

install_tools() {
  local tools=(
    "python@3.12"
    "opentofu@1.10"
    "kubectl@latest"
    "helm@latest"
    "awscli@latest"
  )

  for t in "${tools[@]}"; do
    log "Installing/setting $t via mise…"
    mise use -g "$t"
  done

  log "Ensuring all tools are installed…"
  mise install --yes
}

verify_tools() {
  log "Verifying installed tool versions…"
  if have python3; then python3 --version || true; else warn "python3 not on PATH"; fi
  if have opentofu; then opentofu version || true;
  elif have tofu; then tofu version || true; else warn "OpenTofu not on PATH"; fi
  if have kubectl; then kubectl version --client=true || true; else warn "kubectl not on PATH"; fi
  if have helm; then helm version --short || true; else warn "helm not on PATH"; fi
  if have aws; then aws --version || true; else warn "aws not on PATH"; fi
}

trust_project_config() {
  # If running inside a repo that already has mise.toml or .tool-versions, trust and install
  if [[ -f "mise.toml" || -f ".tool-versions" ]]; then
    log "Project config detected; trusting and installing…"
    mise trust -y || true
    mise install --yes || true
  fi
}

main() {
  require_macos
  ensure_brew
  ensure_mise
  install_tools
  trust_project_config
  verify_tools
  log "Done. Open a new terminal or 'source ~/.zshrc' to ensure PATH is updated."
}

main "$@"
